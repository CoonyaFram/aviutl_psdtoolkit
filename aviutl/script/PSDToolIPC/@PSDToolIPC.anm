@Render
--track0:ID,0,999,0,1
--track1:縮小率,0.01,100,100,0.01
--track2:オフセットX,-5000,5000,0,1
--track3:オフセットY,-5000,5000,0,1
--check0:ここで描画,1
--param:
require("PSDToolIPC")
psdtoolipc = {
  id = obj.track0*1000 + obj.layer,
  file = f ~= nil and f or "",
  layer = l ~= nil and l or "",
  layeradd = "",
  faview = {},
  scale = obj.track1/100,
  offsetx = obj.track2,
  offsety = obj.track3,
  render = function(self)
    if self.file == "" then
      self:usage()
      return
    end
    if #self.faview > 0 then
      local empty = true
      for i, v in ipairs(self.faview) do
        if v == -1 then
          self.faview[i] = ""
        else
          empty = false
        end
      end
      if not empty then
        self.layeradd = " S." .. table.concat(self.faview, "_") .. self.layeradd
      end
    end
    if self.layeradd ~= "" then
      self.layer = self.layer .. self.layeradd
    end
    local ok, modified, width, height = PSDToolIPC.setprops(self.id, self.file, self)
    if not ok then
      self:msg("<s,,B>[PSDToolIPC] 画像の読み込みに失敗しました\n\n"..modified)
      return
    end
    if not modified then
      local data, w, h = self:getpixeldata(width, height)
      if PSDToolIPC.getcache("cache:"..self.id.." "..self.file, data, w * 4 * h) then
        obj.putpixeldata(data)
        obj.copybuffer("cache:"..self.id.." "..self.file, "obj")
        return
      end
    end
    local data, w, h = self:getpixeldata(width, height)
    local ok, msg = PSDToolIPC.draw(self.id, self.file, data, w, h)
    if not ok then
      self:msg("<s,,B>[PSDToolIPC] 描画中にエラーが発生しました\n\n"..msg)
      return
    end
    PSDToolIPC.putcache("cache:"..self.id.." "..self.file, data, w * 4 * h, false)
    obj.putpixeldata(data)
  end,
  getpixeldata = function(self, width, height)
    local maxw, maxh = obj.getinfo("image_max")
    if width > maxw then
      width = maxw
    end
    if height > maxh then
      height = maxh
    end
    obj.setoption("drawtarget","tempbuffer", width, height)
    obj.copybuffer("obj", "tmp")
    return obj.getpixeldata()
  end,
  msg = function(self, msg)
    obj.load("figure", "背景", 0, 1, 1)
    obj.alpha = 0.75
    obj.draw()
    obj.setfont("ＭＳ ゴシック", 16, 3, "0xffffff", "0x000000")
    obj.load("text", msg)
    obj.draw()
  end,
  usage = function(self)
    self:msg([[<s,,B>[PSDToolIPC] 画像が読み込まれていません。]])
  end
}
f=nil;
l=nil;
if obj.check0 then
  psdtoolipc:render()
  psdtoolipc = nil
end

@SimpleView
--track0:,-1,999,-1,1
--track1:,-1,999,-1,1
--track2:,-1,999,-1,1
--track3:,-1,999,-1,1
--check0:ここで描画,1
if psdtoolipc ~= nil then
  table.insert(psdtoolipc.faview, obj.track0)
  table.insert(psdtoolipc.faview, obj.track1)
  table.insert(psdtoolipc.faview, obj.track2)
  table.insert(psdtoolipc.faview, obj.track3)
  if obj.check0 then
    psdtoolipc:render()
    psdtoolipc = nil
  end
end

@目パチ
--track0:間隔,0,1000,120,1
--track1:速さ,1,100,1,1
--track2:オフセット,0,10000,0,1
--check0:ここで描画,1
--dialog:開き,eye0="";ほぼ開き,eye1="";半目,eye2="";ほぼ閉じ,eye3="";閉じ,eye4="";
if psdtoolipc ~= nil then
  local eye = {}
  if eye4 ~= nil and eye4 ~= "" then
    table.insert(eye, eye4)
  end
  if eye3 ~= nil and eye3 ~= "" then
    table.insert(eye, eye3)
  end
  if eye2 ~= nil and eye2 ~= "" then
    table.insert(eye, eye2)
  end
  if eye1 ~= nil and eye1 ~= "" then
    table.insert(eye, eye1)
  end
  if eye0 ~= nil and eye0 ~= "" then
    table.insert(eye, eye0)
  end
  if #eye > 0 then
    -- 閉じかけの絵を1枚挟んで一気に閉じたあと少しずつ開く
    table.insert(eye, 1, eye[#eye-1])

    local interval, speed, offset = obj.track0, obj.track1, obj.track2
    local basetime = obj.frame + interval + offset
    local blink = basetime % interval
    local blink2 = (basetime + interval*obj.rand(0,5,1234,0) + speed*#eye*2) % (interval * 5)
    local applied = false
    for i, v in ipairs(eye) do
      local l = speed*i
      local r = l + speed
      if (l <= blink and blink < r)or(l <= blink2 and blink2 < r) then
        psdtoolipc.layeradd = psdtoolipc.layeradd .. " " .. v
        applied = true
        break;
      end
    end
    if not applied then
      psdtoolipc.layeradd = psdtoolipc.layeradd .. " " .. eye[#eye]
    end
  end
  if obj.check0 then
    psdtoolipc:render()
    psdtoolipc = nil
  end
end
