-- 雀の往来
@Assign
--track0:ID,0,999,0,1
--track1:縮小率,0.01,100,100,0.01
--track2:オフセットX,-5000,5000,0,1
--track3:オフセットY,-5000,5000,0,1
--check0:描画も行う,1
--param:
require("PSDToolKitLib")
PSDToolKitLib.psd:init(
  obj.track0*1000 + obj.layer,
  f ~= nil and f or "",
  obj.track1/100,
  obj.track2,
  obj.track3
)
if l ~= nil then
  PSDToolKitLib.psd:addstate(l)
end
f = nil
l = nil
if obj.check0 then
  PSDToolKitLib.psd:render()
end

@オブジェクト描画
PSDToolKitLib.psd:render()

@パーツ差し替え
--track0:パーツ,0,15,0,1
--dialog:0,p0="";1,p1="";2,p2="";3,p3="";4,p4="";5,p5="";6,p6="";7,p7="";8,p8="";9,p9="";10,p10="";11,p11="";12,p12="";13,p13="";14,p14="";15,p15="";
if obj.track0 == 0 and p0 ~= nil and p0 ~= "" then
  PSDToolKitLib.psd:addstate(p0)
elseif obj.track0 == 1 and p1 ~= nil and p1 ~= "" then
  PSDToolKitLib.psd:addstate(p1)
elseif obj.track0 == 2 and p2 ~= nil and p2 ~= "" then
  PSDToolKitLib.psd:addstate(p2)
elseif obj.track0 == 3 and p3 ~= nil and p3 ~= "" then
  PSDToolKitLib.psd:addstate(p3)
elseif obj.track0 == 4 and p4 ~= nil and p4 ~= "" then
  PSDToolKitLib.psd:addstate(p4)
elseif obj.track0 == 5 and p5 ~= nil and p5 ~= "" then
  PSDToolKitLib.psd:addstate(p5)
elseif obj.track0 == 6 and p6 ~= nil and p6 ~= "" then
  PSDToolKitLib.psd:addstate(p6)
elseif obj.track0 == 7 and p7 ~= nil and p7 ~= "" then
  PSDToolKitLib.psd:addstate(p7)
elseif obj.track0 == 8 and p8 ~= nil and p8 ~= "" then
  PSDToolKitLib.psd:addstate(p8)
elseif obj.track0 == 9 and p9 ~= nil and p9 ~= "" then
  PSDToolKitLib.psd:addstate(p9)
elseif obj.track0 == 10 and p10 ~= nil and p10 ~= "" then
  PSDToolKitLib.psd:addstate(p10)
elseif obj.track0 == 11 and p11 ~= nil and p11 ~= "" then
  PSDToolKitLib.psd:addstate(p11)
elseif obj.track0 == 12 and p12 ~= nil and p12 ~= "" then
  PSDToolKitLib.psd:addstate(p12)
elseif obj.track0 == 13 and p13 ~= nil and p13 ~= "" then
  PSDToolKitLib.psd:addstate(p13)
elseif obj.track0 == 14 and p14 ~= nil and p14 ~= "" then
  PSDToolKitLib.psd:addstate(p14)
elseif obj.track0 == 15 and p15 ~= nil and p15 ~= "" then
  PSDToolKitLib.psd:addstate(p15)
end

@口パク あいうえお
--dialog:あ,a="";い,i="";う,u="";え,e="";お,o="";ん,n="";
local v = "";
if PSDToolKitLib.phoneme == "a" then
  v = a ~= nil and a or ""
elseif PSDToolKitLib.phoneme == "i" then
  v = i ~= nil and i or ""
elseif PSDToolKitLib.phoneme == "u" then
  v = u ~= nil and u or ""
elseif PSDToolKitLib.phoneme == "e" then
  v = e ~= nil and e or ""
elseif PSDToolKitLib.phoneme == "o" then
  v = o ~= nil and o or ""
else
  v = n ~= nil and n or ""
end
PSDToolKitLib.phoneme = ""
if v ~= "" then
  PSDToolKitLib.psd:addstate(v)
end

@口パク 開閉のみ
--track0:速さ,1,100,1,1
--dialog:開き,m0="";ほぼ開き,m1="";半開き,m2="";ほぼ閉じ,m3="";閉じ,m4="";
local m = {}
if m4 ~= nil and m4 ~= "" then
  table.insert(m, m4)
end
if m3 ~= nil and m3 ~= "" then
  table.insert(m, m3)
end
if m2 ~= nil and m2 ~= "" then
  table.insert(m, m2)
end
if m1 ~= nil and m1 ~= "" then
  table.insert(m, m1)
end
if m0 ~= nil and m0 ~= "" then
  table.insert(m, m0)
end
if #m > 0 then
  local speed = obj.track0
  local id = PSDToolKitLib.psd.id
  local stat = PSDToolKitLib.talkstat[id] or {frame = obj.frame-1, n = 0, p = ""}
  if stat.frame ~= obj.frame-1 then
    stat.n = 0
  end
  local p = PSDToolKitLib.phoneme
  if p == "a" or p == "i" or p == "u" or p == "e" or p == "o" then
    stat.n = stat.n + 1
    if stat.n > #m*speed - 1 then
      stat.n = #m*speed - 1
    end
  else
    stat.n = stat.n - 1
    if stat.n < 0 then
      stat.n = 0
    end
  end
  stat.frame = obj.frame
  stat.p = p
  PSDToolKitLib.psd:addstate(m[math.floor(stat.n / speed) + 1])
  PSDToolKitLib.talkstat[id] = stat
  PSDToolKitLib.phoneme = ""
end

@目パチ
--track0:間隔,0,1000,120,1
--track1:速さ,1,100,1,1
--track2:オフセット,0,10000,0,1
--dialog:開き,m0="";ほぼ開き,m1="";半開き,m2="";ほぼ閉じ,m3="";閉じ,m4="";
local m = {}
if m4 ~= nil and m4 ~= "" then
  table.insert(m, m4)
end
if m3 ~= nil and m3 ~= "" then
  table.insert(m, m3)
end
if m2 ~= nil and m2 ~= "" then
  table.insert(m, m2)
end
if m1 ~= nil and m1 ~= "" then
  table.insert(m, m1)
end
if m0 ~= nil and m0 ~= "" then
  table.insert(m, m0)
end
if #m > 0 then
  if #m > 3 then
    table.insert(m, 1, m[#m-1])
  end

  local interval, speed, offset = obj.track0, obj.track1, obj.track2
  local basetime = obj.frame + interval + offset
  local blink = basetime % interval
  local blink2 = (basetime + speed*#m*2) % (interval * 5)
  local applied = false
  for i, v in ipairs(m) do
    local l = speed*i
    local r = l + speed
    if (l <= blink and blink < r)or(l <= blink2 and blink2 < r) then
      PSDToolKitLib.psd:addstate(v)
      applied = true
      break;
    end
  end
  if not applied then
    PSDToolKitLib.psd:addstate(m[#m])
  end
end

@口パク準備
--track0:ローカット,1,16000,100,1
--track1:ハイカット,1,16000,1000,1
--track2:しきい値,1,2000,20,1
--check0:編集全体の音声を元にする,0
--file:
tonumber(nil)
require("PSDToolKitLib")
if obj.check0 then
  PSDToolKitLib.settalking(obj, nil, obj.track0, obj.track1, obj.track2)
else
  PSDToolKitLib.settalking(obj, file, obj.track0, obj.track1, obj.track2)
end
file = nil
