-- 雀の往来
@Assign
--track0:ID,0,999,0,1
--track1:縮小率,0.01,100,100,0.01
--track2:オフセットX,-5000,5000,0,1
--track3:オフセットY,-5000,5000,0,1
--check0:描画も行う,1
--param:
local PSDToolKit = require("PSDToolKit")
-- グローバルに PSD という名前のオブジェクトを確保
PSD = PSDToolKit.PSDState.new(obj.track0*1000 + obj.layer)
if f ~= nil and f ~= "" then PSD.file = f; f = nil end
if l ~= nil and l ~= "" then PSD:addstate(l); l = nil end
PSD.scale = obj.track1/100
PSD.offsetx = obj.track2
PSD.offsety = obj.track3
-- グローバル変数 mpslider に値が入っているなら多目的スライダーを割り当て
if mpslider ~= nil and mpslider ~= 0 then
  PSD.valueholder = PSDToolKit.valueholder:get(mpslider)
end
mpslider = nil
if obj.check0 then
  local ok, msg = pcall(PSD.render, PSD, obj)
  if not ok then PSDToolKit.print(obj, msg) end
end

@オブジェクト描画
local ok, msg = pcall(PSD.render, PSD, obj)
if not ok then require("PSDToolKit").print(obj, msg) end

@パーツ差し替え
--track0:パーツ,0,16,0,1
--dialog:1,p1="";2,p2="";3,p3="";4,p4="";5,p5="";6,p6="";7,p7="";8,p8="";9,p9="";10,p10="";11,p11="";12,p12="";13,p13="";14,p14="";15,p15="";16,p16="";
if idx > 0 then
  local m = {p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16}
  PSD:addstate(m, idx)
end

@口パク あいうえお
--track2:子音処理,0,2,0,1
--track3:口パク準備,1,100,1,1
--check0:口パク準備がなくても有効,1
--dialog:あ,local a="";い,local i="";う,local u="";え,local e="";お,local o="";ん,local n="";
local PSDToolKit = require("PSDToolKit")
local m = {a=a, e=e, i=i, o=o, u=u, N=n}
PSD:addstate(PSDToolKit.LipSyncLab.new(m, obj.track2, obj.track3, obj.check0))

@口パク 開閉のみ
--track0:速さ,1,100,1,1
--track3:口パク準備,1,100,1,1
--check0:口パク準備がなくても有効,1
--dialog:開き,local m0="";ほぼ開き,local m1="";半開き,local m2="";ほぼ閉じ,local m3="";閉じ,local m4="";
local PSDToolKit = require("PSDToolKit")
local m = {}
if m4 ~= "" then table.insert(m, m4) end
if m3 ~= "" then table.insert(m, m3) end
if m2 ~= "" then table.insert(m, m2) end
if m1 ~= "" then table.insert(m, m1) end
if m0 ~= "" then table.insert(m, m0) end
if #m > 0 then
  PSD:addstate(PSDToolKit.LipSyncSimple.new(m, obj.track0, obj.track3, obj.check0))
end

@目パチ
--track0:間隔(秒),0,60,4,0.01
--track1:速さ,1,100,1,1
--track2:オフセット,0,10000,0,1
--dialog:開き,local m0="";ほぼ開き,local m1="";半開き,local m2="";ほぼ閉じ,local m3="";閉じ,local m4="";
local PSDToolKit = require("PSDToolKit")
local m = {}
if m4 ~= "" then table.insert(m, m4) end
if m3 ~= "" then table.insert(m, m3) end
if m2 ~= "" then table.insert(m, m2) end
if m1 ~= "" then table.insert(m, m1) end
if m0 ~= "" then table.insert(m, m0) end
if #m > 0 then
  PSD:addstate(PSDToolKit.Blinker.new(m, obj.track0, obj.track1, obj.track2))
end

@多目的スライダー
--track0:,0,100,0,1
--track1:,0,100,0,1
--track2:,0,100,0,1
--track3:,0,100,0,1
require("PSDToolKit").valueholder:set(
  obj.layer,
  {obj.track0, obj.track1, obj.track2, obj.track3},
  obj
)

@字幕表示フェード
--track0:速さ(秒),0,1,0.10,0.01
--track1:間隔(秒),0,1,0.03,0.01
--track2:拡大率,0,100,1,0.01
--track3:X座標,-100,100,4,0.01
--check0:フェードアウトはシンプル,1
if subtitle == nil then
  return
end
local time = subtitle.time
local totaltime = subtitle.totaltime

local sofs = obj.index * obj.track1
local sl = sofs
local sr = sl + obj.track0
local sp = time < sl and 0 or time > sr and 1 or (time - sl)/(sr - sl)
local eofs = obj.check0 and 0 or (obj.index * obj.track1)
local el = totaltime - eofs - obj.track0
local er = el + obj.track0
local ep = time < el and 0 or time > er and 1 or (time - el)/(er - el)
local prog = sp * (1 - ep)
if prog <= 0 then
  obj.alpha = 0
  return
end
if prog >= 1 then
  return
end
if ep > 0 and obj.check0 then
  obj.alpha = obj.alpha * prog
  return
end
obj.alpha = obj.alpha * prog
obj.zoom = obj.zoom * prog + (obj.zoom * obj.track2) * (1 - prog)
obj.ox = obj.ox * prog + (obj.ox + obj.track3) * (1 - prog)
